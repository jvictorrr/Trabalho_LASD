
Projeto_LASD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000192  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000710  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000292  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  9e:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
uint16_t cont=0;
uint8_t V[10] = {0x7E , 0X30 , 0X6D , 0X79 , 0X33 ,  0X5B , 0X5F , 0X70 , 0X7F ,  0X7B}; // display 7 segmentos simulação


ISR(INT0_vect) //Decrementar 10s
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	num_dezena= num_dezena- 1;
  b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <num_dezena>
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <num_dezena>
	PORTC = V[num_unidade];
  c0:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <num_unidade>
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e0 50       	subi	r30, 0x00	; 0
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	80 81       	ld	r24, Z
  cc:	88 b9       	out	0x08, r24	; 8
	PORTB = V[num_dezena];
  ce:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <num_dezena>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	85 b9       	out	0x05, r24	; 5
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_14>:

ISR(TIMER0_COMPA_vect){
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	cont++; 
  fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 100:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 10a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	if(cont==1000){ // Conta 1000 ms totalizando 1 segundo
 10e:	88 3e       	cpi	r24, 0xE8	; 232
 110:	93 40       	sbci	r25, 0x03	; 3
 112:	99 f4       	brne	.+38     	; 0x13a <__vector_14+0x4e>
		num_unidade--;
 114:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <num_unidade>
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <num_unidade>
		if(num_unidade==0){
 11e:	81 11       	cpse	r24, r1
 120:	08 c0       	rjmp	.+16     	; 0x132 <__vector_14+0x46>
		num_unidade=9;
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <num_unidade>
		num_dezena--;
 128:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <num_dezena>
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <num_dezena>
		}

		cont=0;
 132:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 136:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	}
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <main>:

int main(void)
{
	// principal / interrupção

	DDRD = 0x00;
 14a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xff;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11111111;
 150:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b11111111;
 152:	84 b9       	out	0x04, r24	; 4
	
	EICRA = 0b00000011;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0b00000011;
 15a:	8d bb       	out	0x1d, r24	; 29
	sei();
 15c:	78 94       	sei
		//TCCR0B = 0b00000101;
	//	OCR0A = 0;
		//DDRD = (1<<6);
		
	// Timer 	
	TCCR0A = 0b00000010;
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011; // TC0 com prescaler=64
 162:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // ajusta o comparador do TC0 contar até 249
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 0b00000010; // Habilita a interrupcao na igualdade com OCR0A, sendo a cada 1ms = (64*(249+1)/16Mhz
 168:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	DDRD = (1<<6);
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	8a b9       	out	0x0a, r24	; 10
	
		while (1)
	{
		
		
	PORTC=V[num_unidade]; //
 170:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <num_unidade>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	88 b9       	out	0x08, r24	; 8
	PORTB=V[num_dezena]; //
 17e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <num_dezena>
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	f1 cf       	rjmp	.-30     	; 0x170 <main+0x26>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
