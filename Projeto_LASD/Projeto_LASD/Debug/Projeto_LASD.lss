
Projeto_LASD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075e  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  000010bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 76 00 	call	0xec	; 0xec <main>
  9e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
uint8_t i , j ;
uint8_t V[10] = {0x7E , 0X30 , 0X6D , 0X79 , 0X33 ,  0X5B , 0X5F , 0X70 , 0X7F ,  0X7B}; // display 7 segmentos


ISR(INT0_vect) //Decrementar 10s
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	i = i - 1;
  b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i>
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i>
	PORTC = V[j];
  c0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e0 50       	subi	r30, 0x00	; 0
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	80 81       	ld	r24, Z
  cc:	88 b9       	out	0x08, r24	; 8
	PORTB = V[i];
  ce:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <i>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 50       	subi	r30, 0x00	; 0
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	85 b9       	out	0x05, r24	; 5
}
  dc:	ff 91       	pop	r31
  de:	ef 91       	pop	r30
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:

int main(void)
{
	// principal / interrupção

	DDRD = 0x00;
  ec:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xff;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11111111;
  f2:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b11111111;
  f4:	84 b9       	out	0x04, r24	; 4
	
	EICRA = 0b00000011;
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0b00000011;
  fc:	8d bb       	out	0x1d, r24	; 29
	sei();
  fe:	78 94       	sei

	// pwm
	TCCR0A = 0b10100011;
 100:	83 ea       	ldi	r24, 0xA3	; 163
 102:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101;
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;
 108:	17 bc       	out	0x27, r1	; 39
	DDRD = (1<<6);
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{
		
		
		for (i=9; i>0; i--) //  display da dezena
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i>
 114:	25 c0       	rjmp	.+74     	; 0x160 <main+0x74>
		{
			PORTB =	V[i];
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	85 b9       	out	0x05, r24	; 5
			for (j=9; j>0; j--) //display da unidade
 120:	89 e0       	ldi	r24, 0x09	; 9
 122:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 126:	13 c0       	rjmp	.+38     	; 0x14e <main+0x62>
			{
				PORTC =	V[j];
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e0 50       	subi	r30, 0x00	; 0
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	80 81       	ld	r24, Z
 130:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	83 ed       	ldi	r24, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x4c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x56>
 142:	00 00       	nop
		
		
		for (i=9; i>0; i--) //  display da dezena
		{
			PORTB =	V[i];
			for (j=9; j>0; j--) //display da unidade
 144:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 14e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 152:	e1 11       	cpse	r30, r1
 154:	e9 cf       	rjmp	.-46     	; 0x128 <main+0x3c>
	
	while (1)
	{
		
		
		for (i=9; i>0; i--) //  display da dezena
 156:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i>
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i>
 160:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <i>
 164:	e1 11       	cpse	r30, r1
 166:	d7 cf       	rjmp	.-82     	; 0x116 <main+0x2a>
			{
				PORTC =	V[j];
				_delay_ms(1000);
			}
		}
		if(i<=5 & j<=5) //buzzer pra quando perder
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 16e:	86 30       	cpi	r24, 0x06	; 6
 170:	08 f0       	brcs	.+2      	; 0x174 <main+0x88>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	e6 30       	cpi	r30, 0x06	; 6
 178:	08 f0       	brcs	.+2      	; 0x17c <main+0x90>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	89 23       	and	r24, r25
 17e:	19 f0       	breq	.+6      	; 0x186 <main+0x9a>
		{OCR0A=255;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	87 bd       	out	0x27, r24	; 39
 184:	c4 cf       	rjmp	.-120    	; 0x10e <main+0x22>
		}
		else
		{
			OCR0A = 0;
 186:	17 bc       	out	0x27, r1	; 39
 188:	c2 cf       	rjmp	.-124    	; 0x10e <main+0x22>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
